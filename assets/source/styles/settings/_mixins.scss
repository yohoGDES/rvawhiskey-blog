/***

Sass Mixins

Feel free to use whatever custom mixins you choose.
But comment about the context of each mixin and keep
them here to stay organized!

***/

// CLEARFIX
@mixin clearfix() {
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}



// Ref: $colors @ settings/_variables.scss;
@mixin buttonColor {
    @each $color in $colors {
        &.is-#{nth($color, 1)} {
            background: nth($color, 2);
            &:hover, &:focus { background: darken(nth($color, 2), 20%); }
        }
    }
}
// Ref: $sizes @ settings/_variables.scss;
@mixin buttonSize {
	@each $size, $padding, $font-size, $line-height in $sizes {
        &.msf-button--#{$size} {
            padding:$padding;
			font-size: $font-size;
			line-height: $line-height;
        }
    }
}
@mixin textColor {
    @each $color in $colors {
        &.is-#{nth($color, 1)} {
            color: nth($color, 2);
        }
    }
}
@mixin partners {
    @each $partner, $color1, $color2 in $partners {
        &.partner__#{$partner} {
			.update-online__content-wrap {
				background-color:$color1;
			}
			.update-online__or {
				&:after {
					background-color:$color2;
				}
			}
            .update-online__button a {
				color:$color1;
			}
        }
    }
}

// MEDIA QUERIES: Default
@mixin mq($width, $height: false) {
    @if $height {
        @media ( min-width: + $width ) and ( min-height: + $height ) {
            @content;
        }
    }@else {
        @media ( min-width: + $width ) {
            @content;
        }
    }
}

// MEDIA QUERIES: Desktop first
@mixin mq_max($width, $height: false) {
    @if $height {
        @media ( max-width: + $width ) and ( max-height: + $height ) {
            @content;
        }
    }@else {
        @media ( max-width: + $width ) {
            @content;
        }
    }
}

// MEDIA QUERIES: Range
@mixin mq_range($min, $max, $height: false) {
    @if $height {
        @media ( min-height: + $min ) and ( max-width: + $max ) and ( min-height: + $height ) {
            @content;
        }
    }@else {
        @media ( min-width: + $min ) and ( max-width: + $max ) {
            @content;
        }
    }
}

// MEDIA QUERIES: Retina
@mixin mq_retina {
    @media
        only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min--moz-device-pixel-ratio: 2),
        only screen and (-o-min-device-pixel-ratio: 2/1),
        only screen and (min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi),
        only screen and (min-resolution: 2dppx) {
        @content;
    }
}

// MEDIA QUERIES: Print
@mixin mq_print {
    @media print {
        @content;
    }
}


// Quantity Queries
@mixin at-least($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);
    &:nth-last-of-type(n + #{$num}),
    &:nth-last-of-type(n + #{$num}) ~ #{$child} {
        @content;
    }
}

@mixin at-most($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);
    &:nth-last-of-type(-n + #{$num}):first-of-type,
    &:nth-last-of-type(-n + #{$num}):first-of-type ~ #{$child} {
        @content;
    }
}

@mixin in-between($min, $max) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);
    &:nth-last-of-type(n + #{$min}):nth-last-of-type(-n + #{$max}):first-of-type,
    &:nth-last-of-type(n + #{$min}):nth-last-of-type(-n + #{$max}):first-of-type ~ #{$child} {
      @content;
    }
}
